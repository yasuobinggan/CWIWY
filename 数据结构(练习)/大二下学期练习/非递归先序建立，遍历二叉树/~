#include<stdio.h>
#include<stdlib.h>
#define m 10
typedef struct btnode{
	int data;
	struct btnode *lbt;
	struct btnode *rbt;
}btnode,*btree;
typedef struct{
	btree *top;
	btree *base;
}sqstack;
void initsq(sqstack &s)
{
	s.base=(btree *)malloc(m*sizeof(btree));
	if(!s.base)printf("wrong");
	s.top=s.base;
}
void pusq(sqstack &s,btree e)
{
     *s.top++=e; 
}
void posq(sqstack &s,btree &e)
{
	if(s.top==s.base)printf("wrong");
	e=*--s.top;
}

void travelsq(sqstack s)
{
	btree *i;
	printf("\n输出二叉树路径:\n");
	for(i=s.base;i<s.top;i++)
		printf("%d",(*i)->data);
}

void createtree(btree &tree)
{
	int e;
	scanf("%d",&e);
	if(e==0)tree=NULL;
	else
	{
		tree=(btnode *)malloc(sizeof(btnode));
		tree->data=e;
		createtree(tree->lbt);
		createtree(tree->rbt);
	} 
}
void allpath(btree tree)
{
	sqstack sq;
	btree p;
	p=tree;
	initsq(sq);
	pusq(sq,p);
	while(sq.top!=sq.base||p)
	{
		if(p->lbt)
		{
			//printf("%d ",p->data);
			p=p->lbt;
			pusq(sq,p);	
			//最后一步p指向空指针		
		}
		else
		{
			//posq(sq,p);//左端节点出栈 
			p=p->rbt;//右子树压栈 
		}
		if(!p->lbt&&!p->rbt)
		{
			travelsq(sq);
		} 
	}
}

void travel(btree tree)
{
	if(!tree)return;
	printf("%d",tree->data);
	travel(tree->lbt);
	travel(tree->rbt);
}
int main()
{
	btree tree;
	printf("输入字符创建二叉树:\n");
	createtree(tree);
	allpath(tree);
	//travel(tree);
	return 0;
}
